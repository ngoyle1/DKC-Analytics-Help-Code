get_counts_as_df(follower_numbers_1(con_source$followersCount))
##Bill of Rights Institute
x <- get_first_followers("BRInstitute","-1")
##Bill of Rights Institute
x <- getUser("BRInstitute")
x_ids <- x$getFollowerIDs()
View(get_users_api_direct)
x_ids <- as.data.frame(x$getFollowerIDs())
colnames(x_ids) <- "ids"
bri <- get_users_api_direct(x_ids, 0)
get_counts_as_df(follower_numbers_1(bri$followersCount))
##Civics Renewal
x <- getUser("CivicsRenewal")
x_ids <- as.data.frame(x$getFollowerIDs())
print(get_counts_as_df(follower_numbers_1(bri$followersCount)))
##Function to Speed This Up
easy_function <- function(twitter_account, my_wait_time){
x <- getUser(twitter_account)
x_ids <- as.data.frame(x$getFollowerIDs())
colnames(x_ids) <- "ids"
bri <- get_users_api_direct(x_ids, my_wait_time)
print(get_counts_as_df(follower_numbers_1(bri$followersCount)))
}
easy_function("CivicsRenewal",0)
easy_function("CivicYouth",0)
easy_function("civicedproject",0)
easy_function("CivicEducation",0)
easy_function("CloseUp_DC",0)
easy_function("CivicEdNow",0)
easy_function("icivics",0)
source("/Users/harrocyranka/Desktop/code/fb_ads_functions.R")
View("/Users/harrocyranka/Desktop/code/fb_ads_functions.R")
source("/Users/harrocyranka/Desktop/code/fb_ads_functions.R")
install.packages("fbRads")
install.packages("fbRads")
source("/Users/harrocyranka/Desktop/code/fb_ads_functions.R")
source("/Users/harrocyranka/Desktop/code/fb_ads_functions.R")
source("/Users/harrocyranka/Desktop/code/fb_ads_functions.R")
install.packages("httr")
install.packages("httr")
source("/Users/harrocyranka/Desktop/code/fb_ads_functions.R")
library(devtools)
install_version("httr", version = "1.1.0", repos = "http://cran.us.r-project.org")
library(httr)
remove(list = ls())
options(stringsAsFactors = FALSE)
options(scipen = 999)
source("/Users/harrocyranka/Desktop/code/fb_ads_functions_new.R")
remove(list = ls())
options(stringsAsFactors = FALSE)
options(scipen = 999)
source("/Users/harrocyranka/Desktop/code/fb_ads_functions.R")
?fbad_get_search
f <- fbad_get_search(q = "Mayor")
View(f)
View(fb_ad_age)
View(fb_ad_age)
install.packages("fbRads")
install.packages("fbRads")
remove(list = ls())
options(stringsAsFactors = FALSE)
options(scipen = 999)
source("/Users/harrocyranka/Desktop/code/fb_ads_functions.R")
install.packages("httr")
install.packages("httr")
remove(list = ls())
options(stringsAsFactors = FALSE)
options(scipen = 999)
source("/Users/harrocyranka/Desktop/code/fb_ads_functions.R")
remove(list = ls())
options(stringsAsFactors = FALSE)
options(scipen = 999)
source("/Users/harrocyranka/Desktop/code/fb_ads_functions.R")
source("/Users/harrocyranka/Desktop/code/fb_ads_functions.R")
remove(list = ls())
options(stringsAsFactors = FALSE)
options(scipen = 999)
source("/Users/harrocyranka/Desktop/code/fb_ads_functions.R")
f <- fbad_get_search(q = "Mayor")
remove(list = ls())
options(stringsAsFactors = FALSE)
options(scipen = 999)
source("/Users/harrocyranka/Desktop/code/fb_ads_functions.R")
libraru(fbRads)
library(fbRads)
oauth_endpoints("facebook")
app <- oauth_app('querying_ads_attempt', '1045624065519288', 'ff93f7d28d956c381a7b61b0149fe41a')
fb_token <- oauth2.0_token(oauth_endpoints("facebook"), app,
scope = c("ads_management", "read_insights"),
type  = "application/x-www-form-urlencoded",
cache = FALSE)
app <- oauth_app('querying_ads_attempt', '1045624065519288', 'ff93f7d28d956c381a7b61b0149fe41a')
fb_token <- oauth2.0_token(oauth_endpoints("facebook"), app,
scope = c("ads_management", "read_insights"),
type  = "application/x-www-form-urlencoded",
cache = FALSE)
install_version("httr", version = "1.1.0", repos = "http://cran.us.r-project.org")
library(devtools)
install_version("httr", version = "1.1.0", repos = "http://cran.us.r-project.org")
remove(list = ls())
options(stringsAsFactors = FALSE)
options(scipen = 999)
source("/Users/harrocyranka/Desktop/code/fb_ads_functions.R")
View(fb_ad_age())
View(fb_ad_age)
states <- read.csv("/Users/harrocyranka/Desktop/code/facebook_api_marketing/state_codes_for_fb_ads.csv")
states_vector <- NULL
for(i in 1:nrow(states)){
states_vector[i] <- fbad_reachestimate(targeting_spec = list(
geo_locations = list(regions =data.frame(key = as.character(states$key[i]))),
flexible_spec = list(list(
interests = data.frame(
id = as.character(id_vector),
name = as.character(name_vector)
)
))
))$users
print(paste(states$name[i], " Retrieved", " for ", name_vector,sep = ""))
Sys.sleep(3)
}
states <- read.csv("/Users/harrocyranka/Desktop/code/facebook_api_marketing/state_codes_for_fb_ads.csv")
states_vector <- NULL
for(i in 1:nrow(states)){
states_vector[i] <- fbad_reachestimate(targeting_spec = list(
geo_locations = list(regions =data.frame(key = as.character(states$key[i]))),
flexible_spec = list(list(
interests = data.frame(
id = as.character(id_vector),
name = as.character(name_vector)
)
))
))$users
print(paste(states$name[i], " Retrieved", " for ", name_vector,sep = ""))
Sys.sleep(3)
}
fbad_get_search(q = "Pokemon", type ="adinterest")
remove(list = ls())
options(stringsAsFactors = FALSE)
options(scipen = 999)
source("/Users/harrocyranka/Desktop/code/fb_ads_functions.R")
fbad_get_search(q = "Pokemon", type ="adinterest")
View(fb_ad_age())
View(fb_ad_age)
remove(list = ls())
options(stringsAsFactors = FALSE)
options(scipen = 999)
source("/Users/harrocyranka/Desktop/code/fb_ads_functions.R")
fbad_get_search(q = "Pokemon", type ="adinterest")
fbad_get_search(q = "Mayor", type = "work_positions")
tkn
fbad_init(accountid = "319640814", token = tkn, version = '2.7')
source("/Users/harrocyranka/Desktop/code/fb_ads_functions.Ra")
remove(list = ls())
options(stringsAsFactors = FALSE)
options(scipen = 999)
source("/Users/harrocyranka/Desktop/code/fb_ads_functions.R")
View(fb_ad_race)
fbad_get_search(q = "Seattle", type = "adgeolocation")
ethnic_groups <- read_excel("/Users/harrocyranka/Desktop/code/facebook_api_marketing/race_for_fb_ads.xlsx", sheet = 1)
race_vector <- NULL
##This gets all minorities
for(i in 1:nrow(ethnic_groups)){
race_vector[i] <- fbad_reachestimate(targeting_spec = list(
age_min = unbox(16),
age_max = unbox(30)
geo_locations = list(geo_market = 'DMA:819'),
flexible_spec = list(
list(ethnic_affinity = data.frame(
id = ethnic_groups$id[i],
name = ethnic_groups$Name[i]
))
)
))$users
print(paste(ethnic_groups$Name[i], " Retrieved", " for ", name_vector,sep = ""))
Sys.sleep(3)
}
race_vector[4] <- fbad_reachestimate(targeting_spec = list(
age_min = unbox(16),
age_max = unbox(24)
geo_locations = list(geo_market = 'DMA:819'),
exclusions  = list(ethnic_affinity = data.frame(
id = as.character(ethnic_groups$id),
name = ethnic_groups$Name
))
)
)$users
print(paste("Whites retrieved for ",name_vector, sep = ""))
race_data_frame <- as.data.frame(cbind(c(ethnic_groups$Name,"Whites"),race_vector))
colnames(race_data_frame) <- c("Ethnicity", "Count")
race_data_frame$Count <- as.numeric(race_data_frame$Count)
race_data_frame$Ethnicity <- ifelse(race_data_frame$Ethnicity == "Hispanic (US - All)",
"Hispanics",ifelse(race_data_frame$Ethnicity == "African American (US)",
"Af. Americans",
ifelse(race_data_frame$Ethnicity == "Asian American (US)","Asians",
"Whites")))
return(race_data_frame)
ethnic_groups <- read_excel("/Users/harrocyranka/Desktop/code/facebook_api_marketing/race_for_fb_ads.xlsx", sheet = 1)
race_vector <- NULL
##This gets all minorities
for(i in 1:nrow(ethnic_groups)){
race_vector[i] <- fbad_reachestimate(targeting_spec = list(
age_min = unbox(16),
age_max = unbox(30),
geo_locations = list(geo_market = 'DMA:819'),
flexible_spec = list(
list(ethnic_affinity = data.frame(
id = ethnic_groups$id[i],
name = ethnic_groups$Name[i]
))
)
))$users
print(paste(ethnic_groups$Name[i], " Retrieved", " for ", name_vector,sep = ""))
Sys.sleep(3)
}
race_vector[4] <- fbad_reachestimate(targeting_spec = list(
age_min = unbox(16),
age_max = unbox(30),
geo_locations = list(geo_market = 'DMA:819'),
exclusions  = list(ethnic_affinity = data.frame(
id = as.character(ethnic_groups$id),
name = ethnic_groups$Name
))
)
)$users
print(paste("Whites retrieved for ",name_vector, sep = ""))
race_data_frame <- as.data.frame(cbind(c(ethnic_groups$Name,"Whites"),race_vector))
colnames(race_data_frame) <- c("Ethnicity", "Count")
race_data_frame$Count <- as.numeric(race_data_frame$Count)
race_data_frame$Ethnicity <- ifelse(race_data_frame$Ethnicity == "Hispanic (US - All)",
"Hispanics",ifelse(race_data_frame$Ethnicity == "African American (US)",
"Af. Americans",
ifelse(race_data_frame$Ethnicity == "Asian American (US)","Asians",
"Whites")))
return(race_data_frame)
ethnic_groups <- read_excel("/Users/harrocyranka/Desktop/code/facebook_api_marketing/race_for_fb_ads.xlsx", sheet = 1)
race_vector <- NULL
##This gets all minorities
for(i in 1:nrow(ethnic_groups)){
race_vector[i] <- fbad_reachestimate(targeting_spec = list(
age_min = unbox(16),
age_max = unbox(30),
geo_locations = list(geo_markets = 'DMA:819'),
flexible_spec = list(
list(ethnic_affinity = data.frame(
id = ethnic_groups$id[i],
name = ethnic_groups$Name[i]
))
)
))$users
print(paste(ethnic_groups$Name[i], " Retrieved", " for ", name_vector,sep = ""))
Sys.sleep(3)
}
race_vector[4] <- fbad_reachestimate(targeting_spec = list(
age_min = unbox(16),
age_max = unbox(30),
geo_locations = list(geo_markets = 'DMA:819'),
exclusions  = list(ethnic_affinity = data.frame(
id = as.character(ethnic_groups$id),
name = ethnic_groups$Name
))
)
)$users
print(paste("Whites retrieved for ",name_vector, sep = ""))
race_data_frame <- as.data.frame(cbind(c(ethnic_groups$Name,"Whites"),race_vector))
colnames(race_data_frame) <- c("Ethnicity", "Count")
race_data_frame$Count <- as.numeric(race_data_frame$Count)
race_data_frame$Ethnicity <- ifelse(race_data_frame$Ethnicity == "Hispanic (US - All)",
"Hispanics",ifelse(race_data_frame$Ethnicity == "African American (US)",
"Af. Americans",
ifelse(race_data_frame$Ethnicity == "Asian American (US)","Asians",
"Whites")))
return(race_data_frame)
remove(list = ls())
options(stringsAsFactors = FALSE)
options(scipen = 999)
source('/Users/harrocyranka/Desktop/code/twitter_info_analysis_3.R')
remove(list = ls())
options(stringsAsFactors = FALSE)
options(scipen = 999)
source("/Users/harrocyranka/Desktop/code/twitter_info_analysis_3.R")
x <- getUser("wwp")
x$getFollowersCount
x$getFollowersCount()
remove(list = ls())
options(stringsAsFactors = FALSE)
options(scipen = 999)
source("/Users/harrocyranka/Desktop/code/fb_ads_functions_march.R")
x <- fbad_get_search(q = "Pony", type = "adinterest")
View(x)
remove(list = ls())
library(tuber)
yt_oauth("581635630807-f1bqaac89ef3k2p3pjelhhl74hik2ci2.apps.googleusercontent.com",
""Ad79gQuXVYY-SioV1uoU21CO"","ssl")
yt_oauth("581635630807-f1bqaac89ef3k2p3pjelhhl74hik2ci2.apps.googleusercontent.com",
"Ad79gQuXVYY-SioV1uoU21CO","ssl")
library(tuber)
yt_oauth("581635630807-f1bqaac89ef3k2p3pjelhhl74hik2ci2.apps.googleusercontent.com",
"Ad79gQuXVYY-SioV1uoU21CO","ssl")
yt_oauth("581635630807-f1bqaac89ef3k2p3pjelhhl74hik2ci2.apps.googleusercontent.com",
"Ad79gQuXVYY-SioV1uoU21CO","ssl")
get_stats(video_id="N708P-A45D0")
yt_oauth("581635630807-f1bqaac89ef3k2p3pjelhhl74hik2ci2.apps.googleusercontent.com",
"Ad79gQuXVYY-SioV1uoU21CO","ssl","https://accounts.google.com/o/oauth2/token")
yt_oauth("581635630807-f1bqaac89ef3k2p3pjelhhl74hik2ci2.apps.googleusercontent.com",
"Ad79gQuXVYY-SioV1uoU21CO","ssl","https://accounts.google.com/o/oauth2/token")
get_stats(video_id="N708P-A45D0")
yt_oauth("581635630807-f1bqaac89ef3k2p3pjelhhl74hik2ci2.apps.googleusercontent.com",
"Ad79gQuXVYY-SioV1uoU21CO","ssl")
yt_oauth("581635630807-f1bqaac89ef3k2p3pjelhhl74hik2ci2.apps.googleusercontent.com",
"Ad79gQuXVYY-SioV1uoU21CO","ssl","http://localhost:1410/")
library(devtools)
install_version("httr", version = "1.1.0", repos = "http://cran.us.r-project.org")
library(httr)
unload("httr")
remove(list = ls())
library(scales)
rescale(c(1:5), to = c(-1,1))
library(googlesheets)
library(dplyr)
library(httr)
sessionInfo()
library(httr)
gs_auth(token = "googlesheets_token.rds")
#f <- read_excel("jessica_alba_ajungo.xlsx", sheet = 1)
#g <- read_excel("honest_company_ajungo.xlsx", sheet = 1)
library(dplyr)
ajungo_overlap <- function(list_1, list_2, list_name_1, list_name_2){
suppressMessages(library(dplyr))
k <- merge(list_1,list_2, by = c("empty_vector","category"))
colnames(k) <- c("name", "category",list_name_1,list_name_2)
k <- arrange(k, k[,2], desc(k[,3]))
row.names(k) <- c(1:nrow(k))
return(k)
}
write_ajungo <- function(list_1,excel_file_name){
library(xlsx)
library(dplyr)
list_1 <- arrange(list_1, category,numbers)
vectors_with_categories <- unique(list_1$category)
first_data_frame <- subset(list_1, list_1$category == vectors_with_categories[1])
write.xlsx(first_data_frame,file = excel_file_name,
sheetName = vectors_with_categories[1], row.names = FALSE)
for(i in 2:length(vectors_with_categories)){
write.xlsx(subset(list_1, list_1$category == vectors_with_categories[i]),
file = excel_file_name, sheetName = vectors_with_categories[i],
row.names = FALSE, append = TRUE)
}
write.csv(unique(list_1$category), "categories.csv", row.names = FALSE)
}
new_ajungo_fix <- function(excel_file){
library(readxl)
library(stringr)
options(stringsAsFactors = FALSE)
my_file <- read_excel(excel_file, sheet = 1)
categories <- unlist(c(my_file[3,]))
k <- unlist(which(is.na(categories) == TRUE))
categories[k] <- subset(unlist(my_file[15,]), is.na(unlist(my_file[15,])) == FALSE)
categories <-  gsub("/", "-", categories)
categories <- gsub("  "," ", categories)
f <- my_file[complete.cases(my_file),]
empty_vector <- NULL
odd_columns <- seq(1,ncol(f),2)
even_numbers <-seq(2,ncol(f),2)
for(i in odd_columns){
vector <- as.vector(t(f[,i]))
empty_vector <- append(empty_vector, vector)
}
numbers <- NULL
for(i in even_numbers){
vector_1 <- as.vector(t(f[,i]))
numbers <- append(numbers, vector_1)
}
g <- as.data.frame(cbind(empty_vector,numbers))
g$numbers <- as.numeric(round(as.numeric(g$numbers), digits = 4))
g$category <- rep(tolower(categories), each = 10)
g <- arrange(g, category, as.numeric(numbers))
g$category <- str_to_title(g$category)
g$category <- ifelse(g$category == "Game", "Console Game",
ifelse(g$category == "Institution", "Higher Education Institution",
ifelse(g$category == "Media - News Website","News Website",
ifelse(g$category == "Media - News", "Media Outlet", g$category,
ifelse(g$category == "Product - Service", "Online Products and Services",g$category)))))
return(unique(g))
}
new_ajungo_fix_2 <- function(excel_file){
library(readxl)
options(stringsAsFactors = FALSE)
my_file <- read_excel(excel_file, sheet = 1)
categories <- unlist(c(my_file[4,]))
k <- unlist(which(is.na(categories) == TRUE))
categories[k] <- subset(unlist(my_file[16,]), is.na(unlist(my_file[16,])) == FALSE)
categories <-  gsub("/", "-", categories)
categories <- gsub("  "," ", categories)
f <- my_file[complete.cases(my_file),]
empty_vector <- NULL
odd_columns <- seq(1,ncol(f),2)
even_numbers <-seq(2,ncol(f),2)
for(i in odd_columns){
vector <- as.vector(t(f[,i]))
empty_vector <- append(empty_vector, vector)
}
numbers <- NULL
for(i in even_numbers){
vector_1 <- as.vector(t(f[,i]))
numbers <- append(numbers, vector_1)
}
g <- as.data.frame(cbind(empty_vector,numbers))
g$numbers <- as.numeric(round(as.numeric(g$numbers), digits = 4))
g$category <- rep(tolower(categories), each = 10)
return(unique(g))
}
setwd("/Users/harrocyranka/Desktop/python_pptx_files/ajungo_test/")
x <- new_ajungo_fix("NBA - Findings.xlsx")
View(x)
View(new_ajungo_fix)
x <- new_ajungo_fix("NBA - Findings.xlsx")
#f <- read_excel("jessica_alba_ajungo.xlsx", sheet = 1)
#g <- read_excel("honest_company_ajungo.xlsx", sheet = 1)
library(dplyr)
ajungo_overlap <- function(list_1, list_2, list_name_1, list_name_2){
suppressMessages(library(dplyr))
k <- merge(list_1,list_2, by = c("empty_vector","category"))
colnames(k) <- c("name", "category",list_name_1,list_name_2)
k <- arrange(k, k[,2], desc(k[,3]))
row.names(k) <- c(1:nrow(k))
return(k)
}
write_ajungo <- function(list_1,excel_file_name){
library(xlsx)
library(dplyr)
list_1 <- arrange(list_1, category,numbers)
vectors_with_categories <- unique(list_1$category)
first_data_frame <- subset(list_1, list_1$category == vectors_with_categories[1])
write.xlsx(first_data_frame,file = excel_file_name,
sheetName = vectors_with_categories[1], row.names = FALSE)
for(i in 2:length(vectors_with_categories)){
write.xlsx(subset(list_1, list_1$category == vectors_with_categories[i]),
file = excel_file_name, sheetName = vectors_with_categories[i],
row.names = FALSE, append = TRUE)
}
write.csv(unique(list_1$category), "categories.csv", row.names = FALSE)
}
new_ajungo_fix <- function(excel_file){
library(readxl)
library(stringr)
options(stringsAsFactors = FALSE)
my_file <- read_excel(excel_file, sheet = 1)
categories <- unlist(c(my_file[3,]))
k <- unlist(which(is.na(categories) == TRUE))
categories[k] <- subset(unlist(my_file[15,]), is.na(unlist(my_file[15,])) == FALSE)
categories <-  gsub("/", "-", categories)
categories <- gsub("  "," ", categories)
f <- my_file[complete.cases(my_file),]
empty_vector <- NULL
odd_columns <- seq(1,ncol(f),2)
even_numbers <-seq(2,ncol(f),2)
for(i in odd_columns){
vector <- as.vector(t(f[,i]))
empty_vector <- append(empty_vector, vector)
}
numbers <- NULL
for(i in even_numbers){
vector_1 <- as.vector(t(f[,i]))
numbers <- append(numbers, vector_1)
}
g <- as.data.frame(cbind(empty_vector,numbers))
g$numbers <- as.numeric(round(as.numeric(g$numbers), digits = 4))
g$category <- rep(tolower(categories), each = 10)
g <- arrange(g, category, as.numeric(numbers))
g$category <- str_to_title(g$category)
g$category <- ifelse(g$category == "Game", "Console Game",
ifelse(g$category == "Institution", "Higher Education Institution",
ifelse(g$category == "Media - News Website","News Website",
ifelse(g$category == "Media - News", "Media Outlet",
ifelse(g$category == "Product - Service", "Online Products and Services",g$category)))))
return(unique(g))
}
new_ajungo_fix_2 <- function(excel_file){
library(readxl)
options(stringsAsFactors = FALSE)
my_file <- read_excel(excel_file, sheet = 1)
categories <- unlist(c(my_file[4,]))
k <- unlist(which(is.na(categories) == TRUE))
categories[k] <- subset(unlist(my_file[16,]), is.na(unlist(my_file[16,])) == FALSE)
categories <-  gsub("/", "-", categories)
categories <- gsub("  "," ", categories)
f <- my_file[complete.cases(my_file),]
empty_vector <- NULL
odd_columns <- seq(1,ncol(f),2)
even_numbers <-seq(2,ncol(f),2)
for(i in odd_columns){
vector <- as.vector(t(f[,i]))
empty_vector <- append(empty_vector, vector)
}
numbers <- NULL
for(i in even_numbers){
vector_1 <- as.vector(t(f[,i]))
numbers <- append(numbers, vector_1)
}
g <- as.data.frame(cbind(empty_vector,numbers))
g$numbers <- as.numeric(round(as.numeric(g$numbers), digits = 4))
g$category <- rep(tolower(categories), each = 10)
return(unique(g))
}
setwd("/Users/harrocyranka/Desktop/python_pptx_files/ajungo_test/")
x <- new_ajungo_fix("NBA - Findings.xlsx")
write_ajungo(x,"nba_ajungo_written.xlsx")
y <- new_ajungo_fix("NCAA - Findings.xlsx")
intersect(unique(x$category), unique(y$category))
p <- intersect(unique(x$category), unique(y$category))
write.csv("overlap_categories.csv")
write.csv(p,"overlap_categories.csv", row.names = FALSE)
